#pip install "python-telegram-bot[job-queue]"
import base64
import os

def decrypt_and_run():
    encoded_content = "# Lưu ý: Chạy lệnh sau trong shell trước khi chạy bot:
# pip install python-telegram-bot pytz "python-telegram-bot[job-queue]"

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from datetime import datetime, time,timedelta
import pytz
import sqlite3
import asyncio
import os

TOKEN = "7930815211:AAFCA3wE_DgNqMvWmwnKlqulAQpxo2lAJC4"
ADMIN_IDS = [7184026850]
TIMEZONE = pytz.timezone('Asia/Ho_Chi_Minh')


def init_database():
    import os
    # Set write permissions for the database file if it exists
    if os.path.exists('bot_data.db'):
        os.chmod('bot_data.db', 0o666)
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute(
        '''CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT)'''
    )
    cursor.execute(
        '''CREATE TABLE IF NOT EXISTS transactions (uid TEXT PRIMARY KEY, total REAL, current REAL, daily REAL, tag TEXT, history TEXT)'''
    )
    cursor.execute('INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                   ('auto_update', 'true'))
    conn.commit()
    return conn


conn = init_database()
cursor = conn.cursor()


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def format_number(num):
    return int(num) if num == int(num) else num


def format_completion_message(percent: float, safe_uid: str, total: float, current: float, daily: float, tag: str, remaining_hearts: float) -> str:
    completion_status = "🎉 Chúc mừng bồ iu đã hoàn thành tim rùi nè! 🌟\n💕 Cảm ơn bồ đã tin tưởng và ủng hộ Bông nha 🥰\n🌸 Nếu được, bồ để lại 1 feedback cho Bông nhé: https://www.facebook.com/share/p/18NVk4NsmR/ 💝\n\n" if percent >= 100 else ""
    return (
        "🎀 Helu bồ iu của bông, bông xin gửi tiến độ giao tim nà 💝\n\n" + completion_status +
        f"✨ UID  của bồ: `{safe_uid}`\n"
        f"├ Tổng : {format_number(total)}❤️\n"
        f"├ Tim hiện tại nè: {format_number(current)}❤️\n"
        f"├ Tim mỗi ngày ạ: {format_number(daily)}❤️\n"
        f"├ Tiến độ của bồ: {percent}%\n"
        f"├ Tag : {tag}\n"
        f"└ Tim còn lại nè: {format_number(remaining_hearts)}❤️\n\n"
    )



async def check_specific_uids(update: Update, context: ContextTypes.DEFAULT_TYPE, args):
    not_found_uids = []
    found_uids = []
    messages = []

    for uid in args:
        cursor.execute('SELECT * FROM transactions WHERE uid = ?', (uid,))
        transaction = cursor.fetchone()

        if not transaction:
            not_found_uids.append(uid)
            continue

        _, total, current, daily, tag, history = transaction
        history_list = json.loads(history) if history else []
        percent = round((current / total) * 100, 2)
        safe_uid = uid.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
        remaining_hearts = total - current

        found_uids.append(uid)
        message = (
            "🌸 Helu bồ iu của Bông nè, bông xin gửi tiến độ giao tim ạ 🌺\n\n"
            f"✨ UID của bồ: `{safe_uid}`\n" 
            f"💝 Tổng số tim: {format_number(total)}❤️\n"
            f"🌟 Tim hiện tại: {format_number(current)}❤️\n"  
            f"💫 Tim mỗi ngày: {format_number(daily)}❤️\n"
            f"📊 Tiến độ nè: {percent}%\n"
            f"💕 Tim còn lại: {format_number(remaining_hearts)}❤️\n\n"
        )

        if history_list:
            message += "💌 **Bông đã bắt đầu gửi tim cho bồ vào lúc:**\n"
            current_time = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

            for idx, item in enumerate(reversed(history_list[-50:])):
                value = item['value']
                old_percent = item['percent']
                date = item['date']
                next_day = (datetime.strptime(date, "%Y-%m-%d %H:%M:%S") + timedelta(days=1)).strftime("%Y-%m-%d")

                if idx == 0:  # Chỉ áp dụng cho lần cập nhật gần nhất
                    now = datetime.now(TIMEZONE)
                    next_day_time = datetime.strptime(next_day, "%Y-%m-%d").replace(hour=8, minute=0, second=0, tzinfo=TIMEZONE)
                    if now >= next_day_time:
                        status = f"({old_percent}%)"
                    else:
                        status = "🧸(Bông đang gửi tim cho bồ nhó, 6h sáng mai tim sẽ xuất hiện ở chòm sao của bồ iu )"
                        if percent < 100:  # Only show the notification if not completed
                            message += "\n"
                else:
                    status = f"({old_percent}%)"

                message += f"├ `{date}`: +{format_number(value)}💝 {status}\n"

            messages.append(message)

        if not found_uids:
                await send_reply_and_schedule_deletion(update, context, 
                    "⚠️ Không tìm thấy UID nào!")
                return

    # Gửi thông báo về các UID không tồn tại (nếu có) 
    if not_found_uids:
        not_found_message = "⚠️ **Các UID không tồn tại:**\n" + \
                          "\n".join([f"└ `{uid}`" for uid in not_found_uids])
        sent = await update.message.reply_text(not_found_message, parse_mode="Markdown")
        context.job_queue.run_once(delete_message, 30, data=[update.message.message_id, sent.message_id], chat_id=update.effective_chat.id)

    # Gửi thông tin cho từng UID được tìm thấy
    sent_messages = []
    for message in messages:
        for part in split_message(message):
            sent = await update.message.reply_text(part, parse_mode="Markdown")
            sent_messages.append(sent.message_id)

    context.job_queue.run_once(delete_message,
                               30,
                               data=[update.message.message_id] + sent_messages,
                               chat_id=update.effective_chat.id)

def split_message(message, max_length=4096):
    return [
        message[i:i + max_length] for i in range(0, len(message), max_length)
    ]


def get_auto_update_status():
    cursor.execute('SELECT value FROM settings WHERE key = ?',
                   ('auto_update', ))
    result = cursor.fetchone()
    return result[0].lower() == 'true' if result else True


def set_auto_update_status(status: bool):
    cursor.execute('UPDATE settings SET value = ? WHERE key = ?',
                   (str(status).lower(), 'auto_update'))
    conn.commit()


async def auto_update(context: ContextTypes.DEFAULT_TYPE):
    if not get_auto_update_status():
        return
    cursor.execute('SELECT * FROM transactions')
    transactions = cursor.fetchall()
    for transaction in transactions:
        uid, total, current, daily, tag, history = transaction
        history_list = json.loads(history)
        current_value = current + daily
        if current_value > total:
            current_value = total
        percent = round((current_value / total) * 100, 2)
        history_list.append({
            'date':
            datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S"),
            'value':
            daily,
            'percent':
            percent
        })
        cursor.execute(
            'UPDATE transactions SET current = ?, history = ? WHERE uid = ?',
            (current_value, json.dumps(history_list), uid))
    conn.commit()


async def set_commands(app):
    commands = [

        ("check", "Xem tiến trình"),
        ("start", "Khởi động bot"),
    ]
    await app.bot.set_my_commands(commands)


# Hàm tiện ích: gửi tin nhắn và lên lịch xoá sau delay giây
async def send_reply_and_schedule_deletion(update: Update,
                                           context: ContextTypes.DEFAULT_TYPE,
                                           text: str,
                                           parse_mode="Markdown",
                                           delay: int = 30):
    reply = await update.message.reply_text(text, parse_mode=parse_mode)
    context.job_queue.run_once(
        delete_message,

        delay,
        data=[update.message.message_id, reply.message_id],
        chat_id=update.effective_chat.id)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if is_admin(user_id):
        auto_status = "🟢 BẬT" if get_auto_update_status() else "🔴 TẮT"
        message = ("🛠️ **Bot Giao Tim**\n\n"
                   f"⏰ Tự động cập nhật: {auto_status}\n"
                   "📌 Sử dụng các lệnh:\n"
                   "`/add [UID] [Tổng] [Mỗi ngày]` - Thêm UID\n"
                   "`/check` - Xem tất cả UID\n"
                   "`/check [UID]` - Xem chi tiết\n"
                   "`/del [UID]` - Xoá UID\n"
                   "`/toggle_auto` - Đổi chế độ tự động\n"
                   "`/total_list` - Liệt kê UID theo tag\n"
                   "`/total_hearts` - Tổng số tim"
                   "`/total_note` - Tổng số note\n"
                   "`/note [UID] [Lưu ý]` - Thêm hoặc cập nhật lưu ý cho UID\n")
    else:
        message = ("🌸 **Bot Giao Tim**\n\n"
                   "📌 Sử dụng lệnh:\n"
                   "`/check [UID]` - Xem tiến độ giao tim của bạn\n"
                   "Ví dụ: `/check UID123`\n\n"
                   "💌 tim sẽ có ở sau thời gian hoàn thành mọi người lưu ý giúp bông ạaa")

    messages = split_message(message)
    sent_messages = []
    for part in messages:
        sent = await update.message.reply_text(part, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

    context.job_queue.run_once(delete_message,
                               86400,
                               data=[update.message.message_id] +
                               sent_messages,
                               chat_id=update.effective_chat.id)


async def add_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
       
        return
    try:
        args = context.args
        if len(args) != 3:
            await send_reply_and_schedule_deletion(
                update, context,
                "⚠️ **Cú pháp:**\n`/add [UID] [Tổng] [Mỗi ngày]`\nVí dụ: `/add UID123 400 40`"
            )
            return
        uid, total_str, daily_str = args
        total = eval(total_str) if '/' in total_str else float(total_str)
        daily = eval(daily_str) if '/' in daily_str else float(daily_str)

        # Kiểm tra xem UID đã tồn tại trong database SQLite chưa
        cursor.execute('SELECT uid FROM transactions WHERE uid = ?', (uid, ))
        if cursor.fetchone():
            # Nếu UID đã tồn tại, xóa UID đó khỏi file JSON
            notes = load_notes()
            if uid in notes:
                del notes[uid]
                save_notes(notes)
            await send_reply_and_schedule_deletion(
                update, context,
                f"⚠️ UID `{uid}` đã tồn tại và đã được xóa khỏi notes!")
            return

        context.user_data['temp_uid'] = uid
        context.user_data['temp_total'] = total
        context.user_data['temp_daily'] = daily
        async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            data = query.data

            if data.startswith("group_"):
                if data == "back_to_groups":
                    # Hiển thị lại menu chọn nhóm
                    keyboard = [[InlineKeyboardButton(group, callback_data=f"group_{group}")] for group in tag_groups.keys()]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text("Chọn tag để xem danh sách UID:", reply_markup=reply_markup)
                    return
        tag_groups = {
            "Funny": [
                "30.5", "30.5(31)", "40.1", "40.5", "60", 
                "80(1)", "80(21)", "80(41)", "80(61)"
            ],
            "Funny1": [
                "30.6", "30.6(31)", "40", "50.1", "50.2", 
                "50.5", "50.5(51)", "80.2(1)", "80.2(21)", 
                "80.2(41)", "80.2(61)"
            ],
            "Funny Emulator": [
                "50.6", "60.2","60.2(31)","100.1"
            ],
            "Funny Emulator 3": [
                 "30", "30.1","30.2", "30.3", "40.6"
            ],
            "Funny Emulator1": [
                "50.3","60.5", "100.2", "100.3"
            ]
        }

        # Tạo bàn phím inline với các nhóm tag (hàng dọc)
        keyboard = [[InlineKeyboardButton(group, callback_data=f"group_{group}")] for group in tag_groups.keys()]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent = await update.message.reply_text("Chọn nhóm tag cho UID:",
                                               reply_markup=reply_markup)
        context.job_queue.run_once(
            delete_message,
            30,
            data=[update.message.message_id, sent.message_id],
            chat_id=update.effective_chat.id)
    except Exception as e:
        await send_reply_and_schedule_deletion(update, context, f"⚠️ Lỗi: `{str(e)}`")





async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    tag_groups = {
    "Funny": [
            "30.5", "30.5(31)", "40.1", "40.5", "60", 
            "80(1)", "80(21)", "80(41)", "80(61)"
        ],
        "Funny1": [
            "30.6", "30.6(31)", "40", "50.1", "50.2", 
            "50.5", "50.5(51)", "80.2(1)", "80.2(21)", 
            "80.2(41)", "80.2(61)"
        ],
        "Funny Emulator": [
            "50.6", "60.2","60.2(31)","100.1"
        ],
        "Funny Emulator 3": [
             "30", "30.1","30.2", "30.3", "40.6"
        ],
        "Funny Emulator1": [
            "50.3","60.5", "100.2", "100.3"
        ]
    }

    if data == "back_to_groups":
        keyboard = [[InlineKeyboardButton(group, callback_data=f"group_{group}")] for group in tag_groups.keys()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Chọn tag để xem danh sách UID:", reply_markup=reply_markup)
        return

    if data.startswith("group_"):
        # Xử lý khi chọn nhóm tag
        group = data.replace("group_", "")

        tags = tag_groups.get(group, [])
        if not tags:
            await query.edit_message_text(f"⚠️ Không có tag nào trong nhóm `{group}`!", parse_mode="Markdown")
            return

        # Tạo bàn phím inline với các tag trong nhóm (hàng ngang, mỗi hàng tối đa 5 tag)
        keyboard = []
        row = []
        for i, tag in enumerate(tags):
            row.append(InlineKeyboardButton(tag, callback_data=f"add_{tag}"))
            if (i + 1) % 5 == 0 or i == len(tags) - 1:  # Mỗi hàng tối đa 5 tag
                keyboard.append(row)
                row = []
        # Thêm nút Back
        keyboard.append([InlineKeyboardButton("⬅️ Quay lại", callback_data="back_to_groups")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"Chọn tag trong nhóm `{group}`:",
                                      reply_markup=reply_markup)

    elif data.startswith("add_"):
        # Xử lý khi chọn tag để thêm UID
        tag = data.replace("add_", "")

        # Check if temp data exists
        if not all(key in context.user_data for key in ['temp_uid', 'temp_total', 'temp_daily']):
            await query.edit_message_text("⚠️ Dữ liệu tạm thời đã hết hạn. Vui lòng thực hiện lại lệnh /add")
            return

        uid = context.user_data['temp_uid']
        total = context.user_data['temp_total']
        daily = context.user_data['temp_daily']

        # Check if UID already exists
        cursor.execute('SELECT uid FROM transactions WHERE uid = ?', (uid,))
        if cursor.fetchone():
            await query.edit_message_text(f"⚠️ UID `{uid}` đã tồn tại trong hệ thống!", parse_mode="Markdown")
            return

        # Tạo lịch sử cập nhật đầu tiên
        initial_history = [{
            'date': datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S"),
            'value': daily,
            'percent': round((daily / total) * 100, 2)
        }]

        # Thêm UID vào cơ sở dữ liệu với lịch sử cập nhật đầu tiên
        cursor.execute(
            'INSERT INTO transactions (uid, total, current, daily, tag, history) VALUES (?, ?, ?, ?, ?, ?)',
            (uid, total, daily, daily, tag, json.dumps(initial_history)))
        conn.commit()

        # Get detailed info for the new UID
        cursor.execute('SELECT * FROM transactions WHERE uid = ?', (uid, ))
        transaction = cursor.fetchone()
        _, total, current, daily, tag, history = transaction
        history_list = json.loads(history)
        percent = round((current / total) * 100, 2)
        remaining_hearts = total - current

        success_message = (
            f"```\n"
            f"💝 Bông gửi chút thông tin và lưu ý nhaa 🌸\n\n"
            f"✨ UID: {uid}\n"
            f"├ Tổng: {format_number(total)}❤️\n"
            f"├ Tim hiện có: {format_number(current)}❤️\n"
            f"├ Tim/ngày: {format_number(daily)}❤️\n"
            f"├ Tiến độ: {percent}%\n"
            f"├ Tag: {tag}\n"
            f"└ Còn lại: {format_number(remaining_hearts)}❤️\n\n"
            f"🌟 Lưu ý nhỏ xinh:\n"
            f"- Đừng xóa/block clone nha 🥺\n"
            f"- Tim sẽ xuất hiện ở mục chòm sao 💫\n"
            f"- Nhận tim trước 15h hàng ngày giúp bông nhen 🌸\n"
            f"- Giới thiệu bạn bè nhận thêm tim: https://www.facebook.com/share/p/1JajHNwza1/ 💕\n\n"
            f"- Sau khi xong đơn bông sẽ báo lại ngay ạ \n"
            f"- Tiến độ hằng ngày ở telegram @BongGiaoTimBot \n"
            f"💫 Cảm ơn bồ đã tin tưởng Bông 🫶\n```")
        # Sử dụng edit_message_text để thay đổi tin nhắn chứa inline keyboard
        msg = await query.edit_message_text(success_message, parse_mode="Markdown")
        # Lên lịch xoá tin nhắn sau 60 giây
        context.job_queue.run_once(delete_message, 60, data=[msg.message_id], chat_id=msg.chat_id)


async def check_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    args = context.args
    found_uids = []  # Initialize found_uids list
    if not is_admin(user_id):
        if not args:
            await send_reply_and_schedule_deletion(
                update, 
                context,
                "⚠️ Vui lòng nhập UID của bạn!\nVí dụ: `/check UID123`",
                delay=10
            )
            return
        await check_specific_uids(update, context, args)
        return
    # Nếu không phải admin và không có UID được chỉ định -> từ chối 
    if not is_admin(user_id) and not args:
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return

    # Nếu không phải admin và có UID -> cho phép check
    if not is_admin(user_id) and args:
        await check_specific_uids(update, context, args)
        return

    args = context.args

    if not args:
        # Lệnh /check -> liệt kê tất cả UID (không tự xóa)
        cursor.execute(
            'SELECT * FROM transactions ORDER BY tag, (current/total*100)')
        transactions = cursor.fetchall()

        if not transactions:
            await update.message.reply_text("📂 Không có UID nào được theo dõi."
                                            )
            return

        completed_uids = []
        current_tag = None
        completed_message = "✅ **Danh sách UID đã hoàn thành:**\n\n"
        message = "📋 **Danh sách UID và tiến độ:**\n\n"
        sent_messages = []
        completed_uids = []

        for transaction in transactions:
            uid, total, current, daily, tag, _ = transaction
            percent = round((current / total) * 100, 2) if total != 0 else 0
            safe_uid = uid.replace('_',
                                   '\\_').replace('*',
                                                  '\\*').replace('`', '\\`')
            remaining = total - current
            status = "✅" if percent >= 100 else "❌"

            # Start new section for different tag
            if current_tag != tag:
                if current_tag is not None and len(message) > 0:
                    # Send current chunk if switching to new tag
                    sent = await update.message.reply_text(
                        message, parse_mode="Markdown")
                    sent_messages.append(sent.message_id)
                    message = ""
                current_tag = tag
                message += f"\n🏷️ **Tag: {tag}**\n\n"

            line = (
                f"🔹 `{safe_uid}`\n"
                f"├ Tiến độ: {format_number(current)}❤️/{format_number(total)}❤️ ({percent}%)\n"
                f"├ Còn lại: {format_number(remaining)}❤️\n"
                f"└ Tự động: {format_number(daily)}❤️/ngày {status}\n\n")

            if len(message + line) > 3800:  # Buffer for Markdown
                sent = await update.message.reply_text(message,
                                                       parse_mode="Markdown")
                sent_messages.append(sent.message_id)
                message = f"\n🏷️ **Tag: {tag}** (tiếp)\n\n{line}"
            else:
                message += line

            if percent >= 100:
                completed_uids.append({
                    "uid":
                    safe_uid,
                    "tag":
                    tag,
                    "date":
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                })

        # Send remaining message if any
        if message:
            sent = await update.message.reply_text(message,
                                                   parse_mode="Markdown")
            sent_messages.append(sent.message_id)

        # Show completed UIDs if any
        if completed_uids:
            # Define Funny groups
            funny_groups = {
            "Funny": [
                    "30.5", "30.5(31)", "40.1", "40.5", "60", 
                    "80(1)", "80(21)", "80(41)", "80(61)"
                ],
                "Funny1": [
                    "30.6", "30.6(31)", "40", "50.1", "50.2", 
                    "50.5", "50.5(51)", "80.2(1)", "80.2(21)", 
                    "80.2(41)", "80.2(61)"
                ],
                "Funny Emulator": [
                    "50.6", "60.2","60.2(31)","100.1"
                ],
                "Funny Emulator 3": [
                     "30", "30.1","30.2", "30.3", "40.6"
                ],
                "Funny Emulator1": [
                    "50.3","60.5", "100.2", "100.3"
                ]
            }

            # Group by Funny categories first
            completed_by_funny = {group: [] for group in funny_groups.keys()}
            completed_other = []

            for uid_info in completed_uids:
                tag = uid_info["tag"]
                uid = uid_info["uid"]
                found = False
                for group, tags in funny_groups.items():
                    if tag in tags:
                        completed_by_funny[group].append((uid, tag))
                        found = True
                        break
                if not found:
                    completed_other.append((uid, tag))

            completed_message = "✅ **Danh sách UID đã hoàn thành:**\n\n"

            # List by Funny groups
            for group, uids in completed_by_funny.items():
                if uids:
                    completed_message += f"🎮 **{group}**\n"
                    for uid, tag in uids:
                        completed_message += f"└ `{uid}` ({tag})\n"
                    completed_message += "\n"

            # List other tags
            if completed_other:
                completed_message += "🏷️ **Khác**\n"
                for uid, tag in completed_other:
                    completed_message += f"└ `{uid}` ({tag})\n"
                completed_message += "\n"

            sent = await update.message.reply_text(completed_message,
                                                   parse_mode="Markdown")
            sent_messages.append(sent.message_id)

        # Add summary with current date
        current_date = datetime.now(TIMEZONE).strftime("%d/%m/%Y")
        total_uids = len(transactions)
        completed_count = len(completed_uids)
        in_progress = total_uids - completed_count
        summary = (f"📊 **Tổng kết: {current_date}**\n"
                   f"├ Tổng số UID: {total_uids}\n"
                   f"├ Đã hoàn thành: {completed_count}\n"
                   f"└ Đang thực hiện: {in_progress}\n")
        sent = await update.message.reply_text(summary, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

        # Schedule deletion after 60 minutes
        context.job_queue.run_once(delete_message,
                                   3600,
                                   data=[update.message.message_id] +
                                   sent_messages,
                                   chat_id=update.effective_chat.id)

    else:
        # Lệnh /check [UID1] [UID2] [UID3]... -> xem chi tiết nhiều UID
        not_found_uids = []
        found_uids = []
        messages = []

        for uid in args:
            cursor.execute('SELECT * FROM transactions WHERE uid = ?', (uid,))
            transaction = cursor.fetchone()

            if not transaction:
                not_found_uids.append(uid)
                continue

            _, total, current, daily, tag, history = transaction
            history_list = json.loads(history) if history else []
            percent = round((current / total) * 100, 2)
            safe_uid = uid.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            remaining_hearts = total - current

            found_uids.append(uid)
            completion_status = "🎉 Chúc mừng bồ iu đã hoàn thành tim rùi nè! 🌟\n💕 Cảm ơn bồ đã tin tưởng và ủng hộ Bông nha 🥰\n🌸 Nếu được, bồ để lại 1 feedback cho Bông nhé: https://www.facebook.com/share/p/18NVk4NsmR/ 💝\n\n" if percent >= 100 else ""
            message = (
                "🎀 Helu bồ iu của bông, bông xin gửi tiến độ giao tim nà 💝\n\n" + completion_status +
                f"✨ UID  của bồ: `{safe_uid}`\n"
                f"├ Tổng : {format_number(total)}❤️\n"
                f"├ Tim hiện tại nè: {format_number(current)}❤️\n"
                f"├ Tim mỗi ngày ạ: {format_number(daily)}❤️\n"
                f"├ Tiến độ của bồ: {percent}%\n"
                f"├ Tag : {tag}\n"
                f"└ Tim còn lại nè: {format_number(remaining_hearts)}❤️\n\n"
            )

            if history_list:
                message += "💌 **Bông bắt đầu gửi tim cho bồ vào lúc:**\n"
                current_time = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

                for idx, item in enumerate(reversed(history_list[-50:])):
                    value = item['value']
                    old_percent = item['percent']
                    date = item['date']

                    # Tính toán ngày hôm sau
                    next_day = (datetime.strptime(date, "%Y-%m-%d %H:%M:%S") + timedelta(days=1)).strftime("%Y-%m-%d")

                    if idx == 0:  # Chỉ áp dụng cho lần cập nhật gần nhất
                        # Kiểm tra xem thời gian thực tế đã qua chưa
                        now = datetime.now(TIMEZONE)
                        next_day_time = datetime.strptime(next_day, "%Y-%m-%d").replace(hour=6, minute=0, second=0, tzinfo=TIMEZONE)
                        if now >= next_day_time:
                            # Nếu đã qua 6h sáng ngày hôm sau, hiển thị phần trăm thực tế
                            status = f"({old_percent}%)"
                        else:
                            # Nếu chưa qua, hiển thị dự đoán
                            status = "🧸(Bông đang gửi tim cho bồ nhớ, 6h sáng mai tim sẽ xuất hiện ở chòm sao của bồ iu 🌈)"
                            message += "🌸 Sau 6h sáng nếu bồ không thấy tim ở chòm sao thì nhắn lại cho Bông biết liền nhó 🎀\n"       
                    else:
                        status = f"({old_percent}%)"

                                        # Hiển thị đúng định dạng với icon dễ thương hơn
                    message += f"├ `{date}`: +{format_number(value)}💝 {status}\n"

                message += "\n"

            message += "🌷 Nếu có sai sót gì bồ nhắn lại cho Bông biết liền nhó, Bông sẽ check lại ngay 🥺💕\n"

            messages.append(message)

        if not found_uids:
            await send_reply_and_schedule_deletion(update, context, 
                "⚠️ Không tìm thấy UID nào!")
            return

        # Gửi thông báo về các UID không tồn tại (nếu có)
        if not_found_uids:
            not_found_message = "⚠️ **Các UID không tồn tại:**\n" + \
                              "\n".join([f"└ `{uid}`" for uid in not_found_uids])
            sent = await update.message.reply_text(not_found_message, parse_mode="Markdown")
            sent_messages = [update.message.message_id, sent.message_id]
            context.job_queue.run_once(delete_message, 30, data=sent_messages, chat_id=update.effective_chat.id)

        # Gửi thông tin cho từng UID được tìm thấy
        sent_messages = []
        for message in messages:
            for part in split_message(message):
                sent = await update.message.reply_text(part, parse_mode="Markdown")
                sent_messages.append(sent.message_id)

        context.job_queue.run_once(delete_message,
                                   30,
                                   data=[update.message.message_id] +
                                   sent_messages,
                                   chat_id=update.effective_chat.id)


async def del_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return
    args = context.args
    if not args:
        await send_reply_and_schedule_deletion(
            update, context, "⚠️ **Cú pháp:**\n`/del [UID1] [UID2] [UID3]...`\nVí dụ: `/del UID123 UID456`")
        return

    deleted_uids = []
    not_found_uids = []

    for uid in args:
        cursor.execute('DELETE FROM transactions WHERE uid = ?', (uid, ))
        if cursor.rowcount > 0:
            deleted_uids.append(uid)
        else:
            not_found_uids.append(uid)

    conn.commit()

    message = ""
    if deleted_uids:
        message += f"✅ Đã xóa thành công {len(deleted_uids)} UID:\n"
        for uid in deleted_uids:
            message += f"└ `{uid}`\n"

    if not_found_uids:
        if message:
            message += "\n"
        message += f"⚠️ Không tìm thấy {len(not_found_uids)} UID:\n"
        for uid in not_found_uids:
            message += f"└ `{uid}`\n"

    response_message = await update.message.reply_text(message, parse_mode="Markdown")
    context.job_queue.run_once(
        delete_message,
        30,
        data=[update.message.message_id, response_message.message_id],
        chat_id=update.effective_chat.id)


async def delete_message(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    message_ids = job.data
    chat_id = job.chat_id
    for message_id in message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id,
                                             message_id=message_id)
        except Exception:
            # Silently ignore if message is already deleted or too old
            continue


async def toggle_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return
    current_status = get_auto_update_status()
    new_status = not current_status
    set_auto_update_status(new_status)
    status = "🟢 BẬT" if new_status else "🔴 TẮT"
    response = await update.message.reply_text(f"✅ Chế độ tự động: {status}")
    context.job_queue.run_once(
        delete_message,
        30,
        data=[update.message.message_id, response.message_id],
        chat_id=update.effective_chat.id)


async def list_uids_by_tag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return

    # Define tag groups
    tag_groups_definition = {
    "Funny": [
            "30.5", "30.5(31)", "40.1", "40.5", "60", 
            "80(1)", "80(21)", "80(41)", "80(61)"
        ],
        "Funny1": [
            "30.6", "30.6(31)", "40", "50.1", "50.2", 
            "50.5", "50.5(51)", "80.2(1)", "80.2(21)", 
            "80.2(41)", "80.2(61)"
        ],
        "Funny Emulator": [
            "50.6", "60.2","60.2(31)","100.1"
        ],
        "Funny Emulator 3": [
            "30", "30.1","30.2", "30.3", "40.6"
        ],
        "Funny Emulator1": [
            "50.3","60.5", "100.2", "100.3"
        ]
    }

    # Get all transactions from database
    cursor.execute('SELECT uid, tag, current, total FROM transactions ORDER BY tag, uid')
    transactions = cursor.fetchall()

    if not transactions:
        await update.message.reply_text("📂 Không có UID nào được theo dõi.")
        return

    # Group transactions by defined groups AND by tag within each group
    grouped_data = {group: {} for group in tag_groups_definition.keys()}
    used_tags = set()
    other_tags = {}  # For tags not in any defined group

    # Track all tags being used
    for uid, tag, current, total in transactions:
        used_tags.add(tag)
        percent = round((current / total) * 100, 2) if total != 0 else 0
        found = False
        for group, tags in tag_groups_definition.items():
            if tag in tags:
                # Group by tag within each group
                if tag not in grouped_data[group]:
                    grouped_data[group][tag] = []
                grouped_data[group][tag].append((uid, percent))
                found = True
                break
        if not found:
            # Group by tag within "other" category
            if tag not in other_tags:
                other_tags[tag] = []
            other_tags[tag].append((uid, percent))

    # Find unused tags
    unused_tags = {}
    for group, tags in tag_groups_definition.items():
        unused = [tag for tag in tags if tag not in used_tags]
        if unused:
            unused_tags[group] = unused

    sent_messages = []

    # Send message about unused tags first if any exist
    if unused_tags:
        unused_msg = "📌 **Tags chưa có UID nào:**\n\n"
        for group, tags in unused_tags.items():
            unused_msg += f"**{group}**\n"
            for tag in tags:
                unused_msg += f"└ `{tag}`\n"
            unused_msg += "\n"
        sent = await update.message.reply_text(unused_msg, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

    # Send message for each Funny group, organized by tag
    for group, tags_dict in grouped_data.items():
        if tags_dict:  # Only show groups that have items
            total_uids = sum(len(uids) for uids in tags_dict.values())
            group_message = f"📋 **{group}** ({total_uids} UID)\n\n"

            # Sort tags for consistent display
            for tag in sorted(tags_dict.keys()):
                uids = tags_dict[tag]
                if uids:  # Only show tags that have UIDs
                    group_message += f"tag {tag} \n"
                    # Sort UIDs by completion percentage
                    sorted_uids = sorted(uids, key=lambda x: x[1], reverse=True)
                    for uid, percent in sorted_uids:
                        status = "✅" if percent >= 100 else "❌"
                        group_message += f"└ `{uid}` ({tag}: {percent}%) {status}\n"
                    group_message += "\n"

            sent = await update.message.reply_text(group_message, parse_mode="Markdown")
            sent_messages.append(sent.message_id)

    # Send message for other tags, organized by tag
    if other_tags:
        total_other_uids = sum(len(uids) for uids in other_tags.values())
        other_message = f"📋 **Khác** ({total_other_uids} UID)\n\n"

        # Sort tags for consistent display
        for tag in sorted(other_tags.keys()):
            uids = other_tags[tag]
            other_message += f"tag {tag} \n"
            # Sort UIDs by completion percentage
            sorted_uids = sorted(uids, key=lambda x: x[1], reverse=True)
            for uid, percent in sorted_uids:
                status = "✅" if percent >= 100 else "❌"
                other_message += f"└ `{uid}` ({tag}: {percent}%) {status}\n"
            other_message += "\n"

        sent = await update.message.reply_text(other_message, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

    # Schedule deletion after 3 minutes
    context.job_queue.run_once(
        delete_message,
        180,
        data=[update.message.message_id] + sent_messages,
        chat_id=update.effective_chat.id)


async def total_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    if not is_admin(user_id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return

    cursor.execute('''
        SELECT tag, 
               COUNT(*) as count,
               SUM(total) as total_hearts,
               SUM(current) as current_hearts,
               SUM(total - current) as remaining_hearts
        FROM transactions 
        GROUP BY tag
        ORDER BY SUM(total - current) DESC
    ''')
    results = cursor.fetchall()

    if not results:
        await update.message.reply_text("📂 Không có dữ liệu nào.")
        return

    message = "📊 **Thống kê theo tag:**\n\n"
    total_all = 0

    for tag, count, total, current, remaining in results:
        if remaining:  # Only show tags with remaining hearts
            message += (f"🔹 **{tag}**\n"
                        f"├ Số UID: {count}\n"
                        f"├ Tổng tim: {format_number(total)}❤️\n"
                        f"├ Hiện tại: {format_number(current)}❤️\n"
                        f"└ Còn lại: {format_number(remaining)}❤️\n\n")
            total_all += remaining

    message += f"\n💫 **Tổng tim còn lại: {format_number(total_all)}❤️**"

    # Split and send message if too long
    messages = split_message(message)
    sent_messages = []
    for part in messages:
        sent = await update.message.reply_text(part, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

    # Schedule deletion after 60 seconds
    context.job_queue.run_once(delete_message,
                               60,
                               data=[update.message.message_id] +
                               sent_messages,
                               chat_id=update.effective_chat.id)


async def total_hearts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return
    cursor.execute('SELECT SUM(total - current) FROM transactions')
    total = cursor.fetchone()[0] or 0

    message = f"❤️ Tổng số tim còn lại của tất cả UID: {format_number(total)}❤️"
    response = await update.message.reply_text(message, parse_mode="Markdown")

    context.job_queue.run_once(
        delete_message,
        30,
        data=[update.message.message_id, response.message_id],
        chat_id=update.effective_chat.id)


def load_notes():

    """Đọc dữ liệu từ file JSON. Nếu file không tồn tại, trả về dictionary rỗng."""

    if not os.path.exists('notes.json'):
        return {}

    with open('notes.json', 'r', encoding='utf-8') as f:
        return json.load(f)


def save_notes(notes):

    """Lưu toàn bộ dữ liệu vào file JSON."""
    with open('notes.json', 'w', encoding='utf-8') as f:

        json.dump(notes, f, ensure_ascii=False, indent=2)


async def total_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await send_reply_and_schedule_deletion(update, context,
                                               "⚠️ Truy cập bị từ chối!")
        return

    notes = load_notes()
    if not notes:
        response = await update.message.reply_text("📂 Không có lưu ý nào.")
        context.job_queue.run_once(
            delete_message,
            180,
            data=[update.message.message_id, response.message_id],
            chat_id=update.effective_chat.id)
        return

    # Phân tích và nhóm theo thời gian
    time_groups = {}
    for uid, note in notes.items():
        if len(uid) > 15:
            continue 

        # Skip if UID is longer than 15 characters

        # Tìm giờ trong note (ví dụ: "4h", "15h")

        if note and "h" in note.lower():
            try:
                hour = int(note.lower().replace("h", ""))
                if hour not in time_groups:
                    time_groups[hour] = []
                time_groups[hour].append(uid)
            except ValueError:
                continue

    # Tạo thống kê
    message = "📊 **Thống kê theo thời gian:**\n\n"

    # Sắp xếp theo giờ
    for hour in sorted(time_groups.keys()):
        uids = time_groups[hour]
        message += f"🕐 **{hour}h** ({len(uids)} UID):\n"

        for uid in uids:

            message += f"└ `{uid}`\n"

        message += "\n"


    message += "\n📋 **Chi tiết từng UID:**\n\n"

    for uid, note in notes.items():

        if len(uid) > 15:

            continue

        message += f"🔹 UID: `{uid}`\n"

        if note:

            message += f"   Lưu ý: {note}\n"

        message += "\n"

    messages = split_message(message)

    sent_messages = []
    for part in messages:
        sent = await update.message.reply_text(part, parse_mode="Markdown")
        sent_messages.append(sent.message_id)

    context.job_queue.run_once(delete_message,
                               180,
                               data=[update.message.message_id] +
                               sent_messages,
                               chat_id=update.effective_chat.id)


async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # Get the user ID from either callback query or message
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        message = update.callback_query.message
    else:
        user_id = update.message.from_user.id
        message = update.message

    if not is_admin(user_id):
        await send_reply_and_schedule_deletion(update, context,
                                             "⚠️ Truy cập bị từ chối!")
        return
    try:
        args = context.args
        if len(args) < 1:
            await send_reply_and_schedule_deletion(
                update, context,
                "⚠️ **Cú pháp:**\n`/note [UID] [Tên khách hàng (không bắt buộc)]`\nVí dụ: `/note UID123 thời gian`"
            )
            return

        uid = args[0]
        if len(uid) > 165:
            await send_reply_and_schedule_deletion(
                update, context, "⚠️ UID không được vượt quá 165 ký tự!")
            return

        customer_name = ' '.join(
            args[1:]) if len(args) > 1 else ""  # Tên khách hàng không bắt buộc

        # Load existing notes
        notes = load_notes()

        # Update or add the note for the UID
        notes[uid] = customer_name
        save_notes(notes)

        response = await message.reply_text(
            f"✅ Tên khách hàng đã được cập nhật cho UID `{uid}`:\n{customer_name}",
            parse_mode="Markdown")
        context.job_queue.run_once(
            delete_message,
            180,
            data=[update.message.message_id, response.message_id],
            chat_id=update.effective_chat.id)
    except Exception as e:
        await send_reply_and_schedule_deletion(update, context,
                                             f"⚠️ Lỗi: `{str(e)}`")


async def check_and_remove_notes(context: ContextTypes.DEFAULT_TYPE):
    cursor.execute('SELECT uid FROM transactions')
    existing_uids = {row[0] for row in cursor.fetchall()}


    notes = load_notes()
    for uid in list(notes.keys()):
        if uid in existing_uids:
            del notes[uid]

    save_notes(notes)


if __name__ == '__main__':
    retry_count = 0
    max_retries = 5

    while retry_count < max_retries:
        try:
            app = (ApplicationBuilder().token(TOKEN).post_init(set_commands).
                   get_updates_connect_timeout(30.0).get_updates_read_timeout(
                       30.0).get_updates_write_timeout(30.0).build())
            job_queue = app.job_queue
            if job_queue:
                job_queue.run_daily(auto_update,
                                    time=time(20, 50, tzinfo=TIMEZONE))
                job_queue.run_repeating(check_and_remove_notes,
                                        interval=5,
                                        first=0)
            else:
                print(
                    "⚠️ JobQueue không khả dụng. Vui lòng cài đặt 'python-telegram-bot[job-queue]'."
                )
            # Basic commands for all users
            app.add_handler(CommandHandler("start", start))
            app.add_handler(CommandHandler("check", check_progress))

            # Admin-only commands
            app.add_handler(CommandHandler("add", add_progress))
            app.add_handler(CommandHandler("del", del_uid))
            app.add_handler(CommandHandler("list", list_uids_by_tag))
            app.add_handler(CommandHandler("total_hearts", total_hearts))
            app.add_handler(CommandHandler("total_list", total_list))
            app.add_handler(CommandHandler("toggle_auto", toggle_auto))
            app.add_handler(CommandHandler("note", note))
            app.add_handler(CommandHandler("total_note", total_note))
            app.add_handler(CallbackQueryHandler(button_callback))
            print("🟢 Bot đang chạy...")
            app.run_polling(drop_pending_updates=True)
            break
        except Exception as e:
            retry_count += 1
            wait_time = min(30, 5 * retry_count)  # Exponential backoff
            print(f"⚠️ Lỗi kết nối ({retry_count}/{max_retries}): {str(e)}")
            print(f"🔄 Đang thử kết nối lại sau {wait_time} giây...")
            import asyncio
            import time
            time.sleep(wait_time)
            continue

    if retry_count >= max_retries:
        print(
            "❌ Đã vượt quá số lần thử kết nối tối đa. Vui lòng kiểm tra lại kết nối mạng và token bot."
        )
        print(
            "❌ Đã vượt quá số lần thử kết nối tối đa. Vui lòng kiểm tra lại kết nối mạng và token bot."
        )"
    decoded_content = base64.b64decode(encoded_content.encode('utf-8')).decode('utf-8')
    
    # Thực thi mã đã giải mã
    exec(decoded_content, globals())

if __name__ == '__main__':
    decrypt_and_run()
